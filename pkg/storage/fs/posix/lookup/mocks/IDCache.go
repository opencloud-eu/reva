// Copyright 2018-2022 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IDCache is an autogenerated mock type for the IDCache type
type IDCache struct {
	mock.Mock
}

type IDCache_Expecter struct {
	mock *mock.Mock
}

func (_m *IDCache) EXPECT() *IDCache_Expecter {
	return &IDCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, spaceID, nodeID
func (_m *IDCache) Delete(ctx context.Context, spaceID string, nodeID string) error {
	ret := _m.Called(ctx, spaceID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, spaceID, nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IDCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - nodeID string
func (_e *IDCache_Expecter) Delete(ctx interface{}, spaceID interface{}, nodeID interface{}) *IDCache_Delete_Call {
	return &IDCache_Delete_Call{Call: _e.mock.On("Delete", ctx, spaceID, nodeID)}
}

func (_c *IDCache_Delete_Call) Run(run func(ctx context.Context, spaceID string, nodeID string)) *IDCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IDCache_Delete_Call) Return(_a0 error) *IDCache_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDCache_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *IDCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPath provides a mock function with given fields: ctx, path
func (_m *IDCache) DeleteByPath(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDCache_DeleteByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPath'
type IDCache_DeleteByPath_Call struct {
	*mock.Call
}

// DeleteByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *IDCache_Expecter) DeleteByPath(ctx interface{}, path interface{}) *IDCache_DeleteByPath_Call {
	return &IDCache_DeleteByPath_Call{Call: _e.mock.On("DeleteByPath", ctx, path)}
}

func (_c *IDCache_DeleteByPath_Call) Run(run func(ctx context.Context, path string)) *IDCache_DeleteByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IDCache_DeleteByPath_Call) Return(_a0 error) *IDCache_DeleteByPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDCache_DeleteByPath_Call) RunAndReturn(run func(context.Context, string) error) *IDCache_DeleteByPath_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePath provides a mock function with given fields: ctx, path
func (_m *IDCache) DeletePath(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeletePath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDCache_DeletePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePath'
type IDCache_DeletePath_Call struct {
	*mock.Call
}

// DeletePath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *IDCache_Expecter) DeletePath(ctx interface{}, path interface{}) *IDCache_DeletePath_Call {
	return &IDCache_DeletePath_Call{Call: _e.mock.On("DeletePath", ctx, path)}
}

func (_c *IDCache_DeletePath_Call) Run(run func(ctx context.Context, path string)) *IDCache_DeletePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IDCache_DeletePath_Call) Return(_a0 error) *IDCache_DeletePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDCache_DeletePath_Call) RunAndReturn(run func(context.Context, string) error) *IDCache_DeletePath_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, spaceID, nodeID
func (_m *IDCache) Get(ctx context.Context, spaceID string, nodeID string) (string, bool) {
	ret := _m.Called(ctx, spaceID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, bool)); ok {
		return rf(ctx, spaceID, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, spaceID, nodeID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, spaceID, nodeID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IDCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IDCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - nodeID string
func (_e *IDCache_Expecter) Get(ctx interface{}, spaceID interface{}, nodeID interface{}) *IDCache_Get_Call {
	return &IDCache_Get_Call{Call: _e.mock.On("Get", ctx, spaceID, nodeID)}
}

func (_c *IDCache_Get_Call) Run(run func(ctx context.Context, spaceID string, nodeID string)) *IDCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IDCache_Get_Call) Return(_a0 string, _a1 bool) *IDCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IDCache_Get_Call) RunAndReturn(run func(context.Context, string, string) (string, bool)) *IDCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPath provides a mock function with given fields: ctx, path
func (_m *IDCache) GetByPath(ctx context.Context, path string) (string, string, bool) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetByPath")
	}

	var r0 string
	var r1 string
	var r2 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, bool)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) bool); ok {
		r2 = rf(ctx, path)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// IDCache_GetByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPath'
type IDCache_GetByPath_Call struct {
	*mock.Call
}

// GetByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *IDCache_Expecter) GetByPath(ctx interface{}, path interface{}) *IDCache_GetByPath_Call {
	return &IDCache_GetByPath_Call{Call: _e.mock.On("GetByPath", ctx, path)}
}

func (_c *IDCache_GetByPath_Call) Run(run func(ctx context.Context, path string)) *IDCache_GetByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IDCache_GetByPath_Call) Return(_a0 string, _a1 string, _a2 bool) *IDCache_GetByPath_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IDCache_GetByPath_Call) RunAndReturn(run func(context.Context, string) (string, string, bool)) *IDCache_GetByPath_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, spaceID, nodeID, val
func (_m *IDCache) Set(ctx context.Context, spaceID string, nodeID string, val string) error {
	ret := _m.Called(ctx, spaceID, nodeID, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, spaceID, nodeID, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type IDCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - nodeID string
//   - val string
func (_e *IDCache_Expecter) Set(ctx interface{}, spaceID interface{}, nodeID interface{}, val interface{}) *IDCache_Set_Call {
	return &IDCache_Set_Call{Call: _e.mock.On("Set", ctx, spaceID, nodeID, val)}
}

func (_c *IDCache_Set_Call) Run(run func(ctx context.Context, spaceID string, nodeID string, val string)) *IDCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IDCache_Set_Call) Return(_a0 error) *IDCache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDCache_Set_Call) RunAndReturn(run func(context.Context, string, string, string) error) *IDCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewIDCache creates a new instance of IDCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDCache {
	mock := &IDCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
