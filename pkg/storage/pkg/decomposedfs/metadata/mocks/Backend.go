// Copyright 2018-2022 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	metadata "github.com/opencloud-eu/reva/v2/pkg/storage/pkg/decomposedfs/metadata"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx, n
func (_m *Backend) All(ctx context.Context, n metadata.MetadataNode) (map[string][]byte, error) {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode) (map[string][]byte, error)); ok {
		return rf(ctx, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode) map[string][]byte); ok {
		r0 = rf(ctx, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metadata.MetadataNode) error); ok {
		r1 = rf(ctx, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Backend_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
func (_e *Backend_Expecter) All(ctx interface{}, n interface{}) *Backend_All_Call {
	return &Backend_All_Call{Call: _e.mock.On("All", ctx, n)}
}

func (_c *Backend_All_Call) Run(run func(ctx context.Context, n metadata.MetadataNode)) *Backend_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_All_Call) Return(_a0 map[string][]byte, _a1 error) *Backend_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_All_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode) (map[string][]byte, error)) *Backend_All_Call {
	_c.Call.Return(run)
	return _c
}

// AllWithLockedSource provides a mock function with given fields: ctx, n, source
func (_m *Backend) AllWithLockedSource(ctx context.Context, n metadata.MetadataNode, source io.Reader) (map[string][]byte, error) {
	ret := _m.Called(ctx, n, source)

	if len(ret) == 0 {
		panic("no return value specified for AllWithLockedSource")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, io.Reader) (map[string][]byte, error)); ok {
		return rf(ctx, n, source)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, io.Reader) map[string][]byte); ok {
		r0 = rf(ctx, n, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metadata.MetadataNode, io.Reader) error); ok {
		r1 = rf(ctx, n, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_AllWithLockedSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllWithLockedSource'
type Backend_AllWithLockedSource_Call struct {
	*mock.Call
}

// AllWithLockedSource is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - source io.Reader
func (_e *Backend_Expecter) AllWithLockedSource(ctx interface{}, n interface{}, source interface{}) *Backend_AllWithLockedSource_Call {
	return &Backend_AllWithLockedSource_Call{Call: _e.mock.On("AllWithLockedSource", ctx, n, source)}
}

func (_c *Backend_AllWithLockedSource_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, source io.Reader)) *Backend_AllWithLockedSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(io.Reader))
	})
	return _c
}

func (_c *Backend_AllWithLockedSource_Call) Return(_a0 map[string][]byte, _a1 error) *Backend_AllWithLockedSource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_AllWithLockedSource_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, io.Reader) (map[string][]byte, error)) *Backend_AllWithLockedSource_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, n, key
func (_m *Backend) Get(ctx context.Context, n metadata.MetadataNode, key string) ([]byte, error) {
	ret := _m.Called(ctx, n, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string) ([]byte, error)); ok {
		return rf(ctx, n, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string) []byte); ok {
		r0 = rf(ctx, n, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metadata.MetadataNode, string) error); ok {
		r1 = rf(ctx, n, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Backend_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - key string
func (_e *Backend_Expecter) Get(ctx interface{}, n interface{}, key interface{}) *Backend_Get_Call {
	return &Backend_Get_Call{Call: _e.mock.On("Get", ctx, n, key)}
}

func (_c *Backend_Get_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, key string)) *Backend_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(string))
	})
	return _c
}

func (_c *Backend_Get_Call) Return(_a0 []byte, _a1 error) *Backend_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_Get_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, string) ([]byte, error)) *Backend_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt64 provides a mock function with given fields: ctx, n, key
func (_m *Backend) GetInt64(ctx context.Context, n metadata.MetadataNode, key string) (int64, error) {
	ret := _m.Called(ctx, n, key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt64")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string) (int64, error)); ok {
		return rf(ctx, n, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string) int64); ok {
		r0 = rf(ctx, n, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metadata.MetadataNode, string) error); ok {
		r1 = rf(ctx, n, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt64'
type Backend_GetInt64_Call struct {
	*mock.Call
}

// GetInt64 is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - key string
func (_e *Backend_Expecter) GetInt64(ctx interface{}, n interface{}, key interface{}) *Backend_GetInt64_Call {
	return &Backend_GetInt64_Call{Call: _e.mock.On("GetInt64", ctx, n, key)}
}

func (_c *Backend_GetInt64_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, key string)) *Backend_GetInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(string))
	})
	return _c
}

func (_c *Backend_GetInt64_Call) Return(_a0 int64, _a1 error) *Backend_GetInt64_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetInt64_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, string) (int64, error)) *Backend_GetInt64_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyPath provides a mock function with given fields: ctx, path
func (_m *Backend) IdentifyPath(ctx context.Context, path string) (string, string, string, time.Time, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyPath")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 time.Time
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, string, time.Time, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) string); ok {
		r2 = rf(ctx, path)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) time.Time); ok {
		r3 = rf(ctx, path)
	} else {
		r3 = ret.Get(3).(time.Time)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string) error); ok {
		r4 = rf(ctx, path)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Backend_IdentifyPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyPath'
type Backend_IdentifyPath_Call struct {
	*mock.Call
}

// IdentifyPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *Backend_Expecter) IdentifyPath(ctx interface{}, path interface{}) *Backend_IdentifyPath_Call {
	return &Backend_IdentifyPath_Call{Call: _e.mock.On("IdentifyPath", ctx, path)}
}

func (_c *Backend_IdentifyPath_Call) Run(run func(ctx context.Context, path string)) *Backend_IdentifyPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Backend_IdentifyPath_Call) Return(_a0 string, _a1 string, _a2 string, _a3 time.Time, _a4 error) *Backend_IdentifyPath_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4)
	return _c
}

func (_c *Backend_IdentifyPath_Call) RunAndReturn(run func(context.Context, string) (string, string, string, time.Time, error)) *Backend_IdentifyPath_Call {
	_c.Call.Return(run)
	return _c
}

// IsMetaFile provides a mock function with given fields: path
func (_m *Backend) IsMetaFile(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsMetaFile")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Backend_IsMetaFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMetaFile'
type Backend_IsMetaFile_Call struct {
	*mock.Call
}

// IsMetaFile is a helper method to define mock.On call
//   - path string
func (_e *Backend_Expecter) IsMetaFile(path interface{}) *Backend_IsMetaFile_Call {
	return &Backend_IsMetaFile_Call{Call: _e.mock.On("IsMetaFile", path)}
}

func (_c *Backend_IsMetaFile_Call) Run(run func(path string)) *Backend_IsMetaFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Backend_IsMetaFile_Call) Return(_a0 bool) *Backend_IsMetaFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_IsMetaFile_Call) RunAndReturn(run func(string) bool) *Backend_IsMetaFile_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function with given fields: n
func (_m *Backend) Lock(n metadata.MetadataNode) (metadata.UnlockFunc, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 metadata.UnlockFunc
	var r1 error
	if rf, ok := ret.Get(0).(func(metadata.MetadataNode) (metadata.UnlockFunc, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(metadata.MetadataNode) metadata.UnlockFunc); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.UnlockFunc)
		}
	}

	if rf, ok := ret.Get(1).(func(metadata.MetadataNode) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type Backend_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - n metadata.MetadataNode
func (_e *Backend_Expecter) Lock(n interface{}) *Backend_Lock_Call {
	return &Backend_Lock_Call{Call: _e.mock.On("Lock", n)}
}

func (_c *Backend_Lock_Call) Run(run func(n metadata.MetadataNode)) *Backend_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_Lock_Call) Return(_a0 metadata.UnlockFunc, _a1 error) *Backend_Lock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_Lock_Call) RunAndReturn(run func(metadata.MetadataNode) (metadata.UnlockFunc, error)) *Backend_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// LockfilePath provides a mock function with given fields: n
func (_m *Backend) LockfilePath(n metadata.MetadataNode) string {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for LockfilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(metadata.MetadataNode) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Backend_LockfilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockfilePath'
type Backend_LockfilePath_Call struct {
	*mock.Call
}

// LockfilePath is a helper method to define mock.On call
//   - n metadata.MetadataNode
func (_e *Backend_Expecter) LockfilePath(n interface{}) *Backend_LockfilePath_Call {
	return &Backend_LockfilePath_Call{Call: _e.mock.On("LockfilePath", n)}
}

func (_c *Backend_LockfilePath_Call) Run(run func(n metadata.MetadataNode)) *Backend_LockfilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_LockfilePath_Call) Return(_a0 string) *Backend_LockfilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_LockfilePath_Call) RunAndReturn(run func(metadata.MetadataNode) string) *Backend_LockfilePath_Call {
	_c.Call.Return(run)
	return _c
}

// MetadataPath provides a mock function with given fields: n
func (_m *Backend) MetadataPath(n metadata.MetadataNode) string {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for MetadataPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(metadata.MetadataNode) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Backend_MetadataPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetadataPath'
type Backend_MetadataPath_Call struct {
	*mock.Call
}

// MetadataPath is a helper method to define mock.On call
//   - n metadata.MetadataNode
func (_e *Backend_Expecter) MetadataPath(n interface{}) *Backend_MetadataPath_Call {
	return &Backend_MetadataPath_Call{Call: _e.mock.On("MetadataPath", n)}
}

func (_c *Backend_MetadataPath_Call) Run(run func(n metadata.MetadataNode)) *Backend_MetadataPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_MetadataPath_Call) Return(_a0 string) *Backend_MetadataPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_MetadataPath_Call) RunAndReturn(run func(metadata.MetadataNode) string) *Backend_MetadataPath_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Backend) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Backend_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Backend_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Backend_Expecter) Name() *Backend_Name_Call {
	return &Backend_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Backend_Name_Call) Run(run func()) *Backend_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_Name_Call) Return(_a0 string) *Backend_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Name_Call) RunAndReturn(run func() string) *Backend_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function with given fields: ctx, n
func (_m *Backend) Purge(ctx context.Context, n metadata.MetadataNode) error {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type Backend_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
func (_e *Backend_Expecter) Purge(ctx interface{}, n interface{}) *Backend_Purge_Call {
	return &Backend_Purge_Call{Call: _e.mock.On("Purge", ctx, n)}
}

func (_c *Backend_Purge_Call) Run(run func(ctx context.Context, n metadata.MetadataNode)) *Backend_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_Purge_Call) Return(_a0 error) *Backend_Purge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Purge_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode) error) *Backend_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, n, key, acquireLock
func (_m *Backend) Remove(ctx context.Context, n metadata.MetadataNode, key string, acquireLock bool) error {
	ret := _m.Called(ctx, n, key, acquireLock)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string, bool) error); ok {
		r0 = rf(ctx, n, key, acquireLock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Backend_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - key string
//   - acquireLock bool
func (_e *Backend_Expecter) Remove(ctx interface{}, n interface{}, key interface{}, acquireLock interface{}) *Backend_Remove_Call {
	return &Backend_Remove_Call{Call: _e.mock.On("Remove", ctx, n, key, acquireLock)}
}

func (_c *Backend_Remove_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, key string, acquireLock bool)) *Backend_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *Backend_Remove_Call) Return(_a0 error) *Backend_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Remove_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, string, bool) error) *Backend_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: oldNode, newNode
func (_m *Backend) Rename(oldNode metadata.MetadataNode, newNode metadata.MetadataNode) error {
	ret := _m.Called(oldNode, newNode)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MetadataNode, metadata.MetadataNode) error); ok {
		r0 = rf(oldNode, newNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type Backend_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldNode metadata.MetadataNode
//   - newNode metadata.MetadataNode
func (_e *Backend_Expecter) Rename(oldNode interface{}, newNode interface{}) *Backend_Rename_Call {
	return &Backend_Rename_Call{Call: _e.mock.On("Rename", oldNode, newNode)}
}

func (_c *Backend_Rename_Call) Run(run func(oldNode metadata.MetadataNode, newNode metadata.MetadataNode)) *Backend_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MetadataNode), args[1].(metadata.MetadataNode))
	})
	return _c
}

func (_c *Backend_Rename_Call) Return(_a0 error) *Backend_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Rename_Call) RunAndReturn(run func(metadata.MetadataNode, metadata.MetadataNode) error) *Backend_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, n, key, val
func (_m *Backend) Set(ctx context.Context, n metadata.MetadataNode, key string, val []byte) error {
	ret := _m.Called(ctx, n, key, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, string, []byte) error); ok {
		r0 = rf(ctx, n, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Backend_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - key string
//   - val []byte
func (_e *Backend_Expecter) Set(ctx interface{}, n interface{}, key interface{}, val interface{}) *Backend_Set_Call {
	return &Backend_Set_Call{Call: _e.mock.On("Set", ctx, n, key, val)}
}

func (_c *Backend_Set_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, key string, val []byte)) *Backend_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *Backend_Set_Call) Return(_a0 error) *Backend_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Set_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, string, []byte) error) *Backend_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMultiple provides a mock function with given fields: ctx, n, attribs, acquireLock
func (_m *Backend) SetMultiple(ctx context.Context, n metadata.MetadataNode, attribs map[string][]byte, acquireLock bool) error {
	ret := _m.Called(ctx, n, attribs, acquireLock)

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.MetadataNode, map[string][]byte, bool) error); ok {
		r0 = rf(ctx, n, attribs, acquireLock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type Backend_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - n metadata.MetadataNode
//   - attribs map[string][]byte
//   - acquireLock bool
func (_e *Backend_Expecter) SetMultiple(ctx interface{}, n interface{}, attribs interface{}, acquireLock interface{}) *Backend_SetMultiple_Call {
	return &Backend_SetMultiple_Call{Call: _e.mock.On("SetMultiple", ctx, n, attribs, acquireLock)}
}

func (_c *Backend_SetMultiple_Call) Run(run func(ctx context.Context, n metadata.MetadataNode, attribs map[string][]byte, acquireLock bool)) *Backend_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.MetadataNode), args[2].(map[string][]byte), args[3].(bool))
	})
	return _c
}

func (_c *Backend_SetMultiple_Call) Return(_a0 error) *Backend_SetMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_SetMultiple_Call) RunAndReturn(run func(context.Context, metadata.MetadataNode, map[string][]byte, bool) error) *Backend_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
